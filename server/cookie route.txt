const express = require('express');
const router = express.Router();
const User = require('../models/User');
const Post = require('../models/Post');
const authMiddleware = require('../middleware/auth'); // ✅ Make sure this path is correct

// 🔒 GET current logged-in user info
router.get('/me', authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (!user) return res.status(404).json({ message: 'User not found' });
    res.json(user);
  } catch (err) {
    console.error('Error in /me:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// 🔁 Follow a user
router.post('/:id/follow', authMiddleware, async (req, res) => {
  try {
    const userToFollow = await User.findById(req.params.id);
    const currentUser = await User.findById(req.user.id);

    if (!userToFollow || !currentUser)
      return res.status(404).json({ message: 'User not found' });

    if (userToFollow._id.equals(currentUser._id))
      return res.status(400).json({ message: 'Cannot follow yourself' });

    if (!userToFollow.followers.includes(currentUser._id)) {
      userToFollow.followers.push(currentUser._id);
      currentUser.following.push(userToFollow._id);
      await userToFollow.save();
      await currentUser.save();
      return res.json({ message: 'Followed successfully' });
    }

    res.status(400).json({ message: 'Already following' });
  } catch (err) {
    console.error('Error in follow:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// 🔁 Unfollow a user
router.post('/:id/unfollow', authMiddleware, async (req, res) => {
  try {
    const userToUnfollow = await User.findById(req.params.id);
    const currentUser = await User.findById(req.user.id);

    if (!userToUnfollow || !currentUser)
      return res.status(404).json({ message: 'User not found' });

    userToUnfollow.followers = userToUnfollow.followers.filter(
      (followerId) => !followerId.equals(currentUser._id)
    );
    currentUser.following = currentUser.following.filter(
      (followingId) => !followingId.equals(userToUnfollow._id)
    );

    await userToUnfollow.save();
    await currentUser.save();

    res.json({ message: 'Unfollowed successfully' });
  } catch (err) {
    console.error('Error in unfollow:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// ✅ GET user profile by username (used in frontend route /user/:username)
router.get('/profile/:username', async (req, res) => {
  try {
    const user = await User.findOne({ username: req.params.username.toLowerCase() })
      .select('-password')
      .populate('followers', 'username')
      .populate('following', 'username');

    if (!user) return res.status(404).json({ message: 'User not found' });

    const posts = await Post.find({ user: user._id })
      .sort({ createdAt: -1 })
      .populate('user', 'username')
      .populate('comments.user', 'username');

    res.json({
      user,
      posts,
      followersCount: user.followers.length,
      followingCount: user.following.length,
    });
  } catch (err) {
    console.error('Error fetching user profile:', err);
    res.status(500).json({ message: 'Failed to fetch profile' });
  }
});

// ✅ GET user by ID (used by frontend at /api/users/:id)
router.get('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select('-password');
    if (!user) return res.status(404).json({ message: 'User not found' });

    const posts = await Post.find({ user: user._id }).sort({ createdAt: -1 });

    res.json({
      user,
      posts,
      followersCount: user.followers.length,
      followingCount: user.following.length,
    });
  } catch (err) {
    console.error('Error fetching user by ID:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
