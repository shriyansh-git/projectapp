

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const path = require('path');

const app = express();

// ‚úÖ Log startup
console.log('‚úÖ index.js is running');

// ‚úÖ Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB connected');
    app.listen(process.env.PORT || 5000, () => {
      console.log(`üöÄ Server running on port ${process.env.PORT || 5000}`);
    });
  })
  .catch(err => {
    console.error('‚ùå MongoDB connection error:', err.message);
  });

// ‚úÖ Middleware
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ‚úÖ CORS for local dev
app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// ‚úÖ Session config for localhost (no HTTPS)
app.use(session({
  name: 'sid',
  secret: process.env.SESSION_SECRET || 'keyboardcat',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: process.env.MONGO_URI,
    ttl: 60 * 60 * 24,
  }),
  cookie: {
    httpOnly: true,
    secure: false,
    sameSite: 'lax',
    maxAge: 1000 * 60 * 60 * 24 * 7,
  }
}));

// ‚úÖ Routes
const authRoutes = require('./routes/auth');
const postRoutes = require('./routes/posts');
const userRoutes = require('./routes/users');

app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/users', userRoutes);



final DEPLOYMENT ONE -- ---------------------------------------------------------------------
// require('dotenv').config();
// const express = require('express');
// const mongoose = require('mongoose');
// const cors = require('cors');
// const session = require('express-session');
// const MongoStore = require('connect-mongo');

// const app = express();

// // ‚úÖ Frontend Netlify URL
// const CLIENT_URL = 'https://instapicme.netlify.app';

// // ‚úÖ Log to confirm server starts
// console.log('‚úÖ index.js is running');

// // ‚úÖ Middleware
// app.use(cors({
//   origin: CLIENT_URL,
//   credentials: true,
// }));

// app.use(express.json());
// app.use(express.urlencoded({ extended: true }));

// // ‚úÖ Session config
// app.use(session({
//   name: 'sid',
//   secret: process.env.SESSION_SECRET || 'supersecret',
//   resave: false,
//   saveUninitialized: false,
//   store: MongoStore.create({
//     mongoUrl: process.env.MONGO_URI,
//     ttl: 7 * 24 * 60 * 60, // 7 days
//   }),
//   cookie: {
//     httpOnly: true,
//     secure: true,
//     sameSite: 'none',
//     maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
//   },
// }));

// // ‚úÖ Routes
// app.use('/api/auth', require('./routes/auth'));
// app.use('/api/posts', require('./routes/posts'));

// // ‚ùå REMOVE frontend serving ‚Äì not needed for backend-only Render deployment
// // app.use(express.static(path.join(__dirname, '../client/build')));
// // app.get('*', (req, res) =>
// //   res.sendFile(path.join(__dirname, '../client/build/index.html'))
// // );

// // ‚úÖ Connect to MongoDB then start server
// mongoose.connect(process.env.MONGO_URI)
//   .then(() => {
//     app.listen(5000, () => console.log('üöÄ Server running on port 5000'));
//   })
//   .catch(err => console.error('‚ùå MongoDB connection error:', err));


LOCAL WORKING ------------------------------------------------------------------------------


require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const session = require('express-session');
const MongoStore = require('connect-mongo');

const app = express();

// ‚úÖ Log startup
console.log('‚úÖ Local dev server starting...');

// ‚úÖ Middleware: CORS
app.use(cors({
  origin: 'http://localhost:3000', // React frontend
  credentials: true,
}));

// ‚úÖ Middleware: JSON parsing
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‚úÖ Session configuration
app.use(session({
  name: 'sid',
  secret: process.env.SESSION_SECRET || 'supersecret',
  resave: false,
  saveUninitialized: false,
  store: MongoStore.create({
    mongoUrl: process.env.MONGO_URI,
    ttl: 7 * 24 * 60 * 60, // 7 days
  }),
  cookie: {
    httpOnly: true,
    secure: false, // ‚ùó false for localhost, true in production
    sameSite: 'lax', // ‚ùó lax for local, 'none' for cross-site
    maxAge: 7 * 24 * 60 * 60 * 1000,
  },
}));

// ‚úÖ Routes
app.use('/api/auth', require('./routes/auth'));
app.use('/api/posts', require('./routes/posts'));
app.use('/api/users', require('./routes/users')); // ‚úÖ <- MISSING LINE FIXED

// ‚úÖ MongoDB + Start Server
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ MongoDB connected successfully');
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => console.log(`üöÄ Local server running on http://localhost:${PORT}`));
  })
  .catch(err => console.error('‚ùå MongoDB connection error:', err));
